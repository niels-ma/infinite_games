name: DEV Deploy

on:
  push:
    branches:
      - develop
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: "${{ vars.AWS_ACCOUNT_INFRA_ID }}"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ vars.AWS_ECR_PREFIX }}/infinite-games:${{github.sha}}
          cache-from: type=gha,scope=api
          cache-to: type=gha,mode=max,scope=api
  deploy:
    name: Deploy via Helmfile
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Check out infra
        uses: actions/checkout@master
        with:
          repository: infinite-mech/infra
          ref: main
          ssh-key: ${{ secrets.INFRA_SSH_KEY }}

      # Install prerequisites
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v2.1.0
        with:
          additional-helm-plugins: https://github.com/jkroepke/helm-secrets --version v4.6.2
      - name: 'Setup yq'
        uses: dcarbone/install-yq-action@v1
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: kubeconfig
        run: |
          aws eks update-kubeconfig --name ig-stg-eks
      - name: Setup SOPS
        uses: nhedger/setup-sops@v2
      - name: install kubectl
        uses: azure/setup-kubectl@v4
      # Update image tag and deploy
      - name: Update image tag
        id: update-image-tag
        env:
          IMAGE_TAG: ${{github.sha}}
        run: |
          cd deploy/stg
          yq  e -i '.image.tag = "'"${IMAGE_TAG}"'"' miners/values-ig-miner-dev.yaml
          yq  e -i '.image.tag = "'"${IMAGE_TAG}"'"' validators/values-ig-validator-dev.yaml
          if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
            git config --global user.name "GitHub Actions Bot"
            git config --global user.email "actions@github.com"
            git add miners/values-ig-miner-dev.yaml validators/values-ig-validator-dev.yaml
            git commit -m "infinite_games: Update dev miners and validator image tag to \"${IMAGE_TAG}\""
            git push
          fi
          helmfile -l app=ig-miner-dev apply --skip-deps --concurrency=1
          helmfile -l name=ig-validator-dev apply --skip-deps --concurrency=1

  discord_alerts:
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: always()
    steps:
      - name: Alert build image failure
        if: needs.build.result == 'failure'
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Build image DEVELOP failed"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL

      - name: Alert deployments failure
        if: needs.deploy.result == 'failure'
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Deploy validator or miner DEVELOP failed"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL


      - name: Alert deployments completed
        if: needs.deploy.result == 'success' 
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY }}"
          MESSAGE="Deploy miners and validator ${IMAGE_TAG} DEVELOP complete"
          curl -H "Content-Type: application/json" \
          -d "{\"content\": \"$MESSAGE\"}" \
          $WEBHOOK_URL
